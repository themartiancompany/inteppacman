#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  _check_cmd \
    "su"
  _check_cmd \
    "pacman"
}

# shellcheck disable=SC2034
_global_variables() {
  operation_date=()
  user_install=""
  pacman_args=()
  android_app=""
  color=""
  quiet=""
}

_android_bad() {
  local \
    _robot="${1}" \
    _mount \
    _mount_opts=() \
    _flag \
    _cmd=()
  if [[ "${_robot}" == "false" ]]; then
    _flag='rw'
  elif [[ "${_robot}" == "true" ]]; then
    _flag='ro'
  fi
  _mount="/system/bin/mount"
  _mount_opts+=(
    -o
      "remount,${_flag}"
  )
  _cmd=(
    "${_mount}"
    "${_mount_opts[@]}"
    "/"
  )
  sudo \
    "${_cmd[@]}"
  return \
    0
}

_android_corrupt() {
  local \
    _msg=()
  _msg=(
    "remounting Android root"
    "as read-write"
  )
  _msg_info \
   "${_msg[*]}" 
  _android_bad \
    'false'
}

_android_naughty() {
  local \
    _msg=()
  _msg=(
    "remounting Android root"
    "as read-only"
  )
  _msg_info \
   "${_msg[*]}" 
  _android_bad \
    'true'
}

_sudo_check() {
  local \
    _check \
    _msg_sry \
    _msg_may \
    _out
  _msg_sry="Sorry, user "
  _msg_may="may not run sudo on"
  _check="$( \
    sudo \
      -v 2>&1)"
  _out="true"
  if [[ "${_check}" == "${_msg_sry}"* ]] &&
     [[ "${_check}" == *"${_msg_may}"*"." ]]; then
    _out="false"
  fi
  echo \
    "${_out}"
}

_pacman_run() {
  local \
    _msg=()
  _msg=(
    "running"
    "${_pacman_prefix[@]}"
    "${_pacman_cmd[@]}"
    "${_pacman_args[@]}"
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${_pacman_prefix[*]}" == "su -c"* ]]; then
    su \
      -c \
      "${_pacman_cmd[*]} \
        ${_pacman_args[*]}" || \
      true
  else
    "${_pacman_prefix[@]}" \
      "${_pacman_cmd[@]}" \
        "${_pacman_args[@]}" || \
      true
  fi
}

_android_system_install() {
  local \
    _apk="${1}" \
    _msg=() \
    install
  _install="/system/bin/install"
  _msg=(
    "installing apk file"
    "'${_apk}' at system level"
  )
  _msg_info \
    "${_msg[*]}"
  _android_corrupt || \
    true
  _msg_info \
    "'${_apk}' -> '/${_apk}'..."
  # TODO: install libraries
  sudo \
    "${_install}" \
    -vDm644 \
    "./${_apk}" \
    "/${_apk}"
  _android_naughty || \
    true
}

_android_user_install() {
  local \
    _apk="${1}" \
    _msg=() \
    _cmd=()
  _msg=(
    "installing apk file"
    "'${_apk}' at user level"
    "(it requires administrative"
    "privileges regardless)"
  )
  _msg_info \
    "${_msg[*]}"
  _cmd+=(
    sudo
      cmd
        package
          install
            --user
              0
            "/data/local/tmp/base.apk"
  )
  _msg=(
    "moving apk file"
    "'${_apk}' to"
    "/data/local/tmp/base.apk"
  )
  _msg_info \
    "${_msg[*]}"
  sudo \
    mv \
    "./${_apk}" \
    "/data/local/tmp/base.apk"
  _msg=(
    "running"
    "'${_cmd[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
  "${_cmd[@]}"
}

_pkg_android_app_install() {
  local \
    _apps=() \
    _apk \
    _msg=()
  _apps=(
    "$@"
  )
  _msg=(
    "installing Android packages"
    "${_apps[*]}"
  )
  _msg_info \
    "${_msg[*]}"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_tmp_dir}"
  for _apk \
    in "${_android_apps[@]}"; do
    if [[ "${_user_install}" == "n" ]]; then
      _android_system_install \
        "${_apk}"
    elif [[ "${_user_install}" == "y" ]]; then
      _android_user_install \
        "${_apk}"
    fi
  done
  cd \
    "${_oldpwd}"
  _msg=(
    "cleaning temporary directory"
    "'${_tmp_dir}'"
  )
  _msg_info \
    "${_msg[*]}"
  rm \
    -rf "${_tmp_dir}"
}

_android_user_uninstall() {
  local \
    _app="${1}" \
    _msg=() \
    _cmd=()
  _msg=(
    "Uninstalling user"
    "application '${_app}'."
  )
  _msg_info \
    "${_msg[*]}" 
  _cmd+=(
    sudo
      pm
        uninstall
          "${_app}"
  )
  "${_cmd[@]}"
}

_android_app_uninstall() {
  local \
    _apps=() \
    _app \
    _msg=()
  _apps=(
    "$@"
  )
  _msg=(
    "Unininstalling Android packages"
    "${_apps[*]}."
  )
  _msg_info \
    "${_msg[*]}"
  for _app \
    in "${_apps[@]}"; do
    if [[ "${_user_install}" == "n" ]]; then
      echo \
        "TODO: system uninstall"
      # _android_system_uninstall \
      #   "${_app}"
    elif [[ "${_user_install}" == "y" ]]; then
      _android_user_uninstall \
        "${_app}"
    fi
  done
  _msg=(
    "Done."
  )
  _msg_info \
    "${_msg[*]}"
}

_pkg_android_app_check() {
  local \
    _pkg="${1}" \
    _msg=()
  _msg=(
    "checking package archive"
    "'${_pkg}' for Android"
    "applications."
  )
  _msg_info \
    "${_msg[*]}"
  _apks+=( $( \
    echo \
      "$(tar \
         -tf \
         "${_pkg}")" | \
         { grep \
             'system/\|data/' || \
           true; } | \
           { grep \
               "/base.apk" || \
             true; })
  )
}

_android_data_install() {
  local \
    _pkg="${1}" \
    _install \
    _file \
    _files=() \
    _oldpwd \
    _msg=()
  _install="/system/bin/install"
  _oldpwd="$( \
    pwd)"
  _msg=(
    "Package marked as Android application"
    "with -A option, copying the contents of"
    "'${_pkg}' over the file system."
  )
  _msg_info \
    "${_msg[*]}"
  rm \
    -rf \
    "${_tmp_dir}/"* || \
  true
  _files+=( $( \
    tar \
      -tf \
      "${_pkg}")
  )
  cd \
    "${_tmp_dir}"
  tar \
   -xf \
   "${_pkg}"
  _android_corrupt || \
    true
  for _file in "${_files[@]}"; do
    if [[ "${_file}" != ".PKGINFO" && \
          "${_file}" != ".MTREE" && \
          "${_file}" != ".BUILDINFO" && \
          "${_file}" != ".INSTALL" ]]; then
      if [[ ! -d "./${_file}" ]]; then
        sudo \
          "${_install}" \
          -vDm644 \
          "./${_file}" \
          "/${_file}" || \
          true
      fi
    fi
  done
  _android_naughty || \
    true
  rm \
    -rf \
    "${_tmp_dir}/"* || \
  true
  cd \
    "${_oldpwd}"
}

_pkg_android_app_filter() {
  local \
    _pkg="${1}" \
    _msg=() \
    _apks=() \
    _oldpwd
  _pkg_android_app_check \
      "${_pkg}"
  if [[ "${_apks[*]}" != "" ]]; then
    _msg=(
      "package '${_pkg}' is for an"
      "Android application, extracting"
      "in '${_tmp_dir}'")
    _msg_info \
      "${_msg[*]}"
    _oldpwd="$( \
      pwd)"
    cd \
      "${_tmp_dir}"
    tar \
      -xf \
      "${_pkg}"
    cd \
      "${_oldpwd}"
  else
    _msg=(
      "found no Android applications"
      "in '${_pkg}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _android_apps+=(
    "${_apks[@]}"
  )
}

_android_app_name_check() {
  local \
    _pkg="${1}" \
    _msg=()
  _msg=(
    "Checking package"
    "'${_pkg}' is for an Android"
    "application."
  )
  _msg_info \
    "${_msg[*]}"
  _apks+=( $( \
    echo \
      "$(pacman \
         -Ql \
         "${_pkg}")" | \
         { grep \
             '/system/app\|/data/app' || \
           true; } | \
           { grep \
               "/base.apk" || \
             true; })
  )
}

_android_app_filter_name_get() {
  local \
    _pkg="${1}" \
    _msg=() \
    _apks=() \
    _names=()
  _android_app_name_check \
      "${_pkg}"
  if [[ "${_apks[*]}" != "" ]]; then
    _msg=(
      "package '${_pkg}' is for an"
      "Android application, getting its name"
    )
    _msg_info \
      "${_msg[*]}"
    _name="$( \
      basename \
        "$(dirname \
             "${_apks[-1]}")")"
  else
    _msg=(
      "found no Android applications"
      "in '${_pkg}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _android_apps+=(
    "${_names[@]}"
  )
}

_inteppacman() {
  local \
    _android_app="${1}" \
    _user_install="${2}" \
    _pacman_prefix=() \
    _pacman_args=() \
    _pacman_cmd=() \
    _arg \
    _os \
    _android_action \
    _android_apps=() \
    _pkg \
    _packages=() \
    _tmp_dir
  shift \
    2
  _pacman_args=(
    "$@"
  )
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _tmp_dir="$( \
      mktemp \
        -d)"
    for _arg \
      in "${_pacman_args[@]}"; do
      if [[ "${_arg}" == "-S"* ]] || \
         [[ "${_arg}" == "-U"* ]]; then
        _android_action="install"
      elif [[ "${_arg}" == "-R"* ]]; then
        _android_action="uninstall"
      fi
      if [[ "${_arg}" != "-"* ]]; then
        if [[ "${_arg}" == *".pkg.tar."* ]]; then
          _pkg="$( \
            realpath \
              "${_arg}")"
        else
          _pkg="${_arg}"
        fi
        _packages+=(
          "${_pkg}"
        )
      fi
    done
    for _pkg in "${_packages[@]}"; do
      if [[ "${_pkg}" == *".pkg.tar."* ]]; then
        if [[ "${_android_action}" == "install" && \
              "${_android_app}" == "y" ]]; then
          _android_data_install \
            "${_arg}"
        fi
        _pkg_android_app_filter \
          "${_arg}"
      fi
      if [[ "${_android_action}" == "uninstall" ]]; then
        _android_app_filter_name_get \
          "${_arg}"
      fi
    done
    if [[ "${_android_action}" == "install" && \
          "${_android_apps[*]}" != "" ]]; then
      _pkg_android_app_install \
        "${_android_apps[@]}"
    fi
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    if [[ "$(_sudo_check)" == "true" ]]; then
      _pacman_prefix+=(
        'sudo'
      )
    elif [[ "$(_sudo_check)" == "false" ]]; then
      _pacman_prefix+=(
        'su'
          '-c'
      )
    fi
  fi
  _pacman_cmd+=(
    'pacman'
  )
  if [[ "${_os}" == "Android" ]]; then
    _android_corrupt || \
      true
  fi
  _pacman_run
  if [[ "${_os}" == "Android" ]]; then
    _android_naughty || \
      true
  fi
}

_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "operation" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "android" \
    "app" \
    "n"
  _set_override \
    "user" \
    "install" \
    "n"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "operation" "date")"
  _msg_info "      Android application:   ${android_app}"
  _msg_info "       User-level install:   ${user_install}"
  _msg_info "              Pacman args:   ${pacman_args[*]}"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

integer prude pacman

Usage:
  $(_get "app" "name")
    [options]
    --
    [pacman args]

  options:
     -A                   Explicitly specify it's an
                          Android app.
                          Default: ${android_app}
     -u                   User-level installation.
                          Default: ${user_install}

     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'Aucvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_android_app="y" ;;
    u) override_user_install="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
pacman_args=(
  "$@"
)
_set_overrides
app_opts=(
  "${android_app}"
  "${user_install}"
  "${pacman_args[@]}"
)
_config_user_init \
  "${app_name}"
_show_config
_inteppacman \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:

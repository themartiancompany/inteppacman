#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  _check_cmd \
    "su"
  _check_cmd \
    "pacman"
}

# shellcheck disable=SC2034
_global_variables() {
  operation_date=()
  user_install=""
  pacman_args=()
  color=""
  quiet=""
}

_android_bad() {
  local \
    _robot="${1}" \
    _mount \
    _mount_opts=() \
    _flag \
    _cmd=()
  if [[ "${_robot}" == "false" ]]; then
    _flag='rw'
  elif [[ "${_robot}" == "true" ]]; then
    _flag='ro'
  fi
  _mount="/system/bin/mount"
  _mount_opts+=(
    -o
      "remount,${_flag}"
  )
  _cmd=(
    "${_mount}"
    "${_mount_opts[@]}"
    "/"
  )
  sudo \
    "${_cmd[@]}"
  return \
    0
}

_android_corrupt() {
  _android_bad \
    'false'
}

_android_naughty() {
  _android_bad \
    'true'
}

_sudo_check() {
  local \
    _check \
    _msg_sry \
    _msg_may \
    _out
  _msg_sry="Sorry, user "
  _msg_may="may not run sudo on"
  _check="$( \
    sudo \
      -v 2>&1)"
  _out="true"
  if [[ "${_check}" == "${_msg_sry}"* ]] &&
     [[ "${_check}" == *"${_msg_may}"*"." ]]; then
    _out="false"
  fi
  echo \
    "${_out}"
}

_pacman_run() {
  local \
    _msg=()
  _msg=(
    "running"
    "${_pacman_prefix[@]}"
    "${_pacman_cmd[@]}"
    "${_pacman_args[@]}"
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${_pacman_prefix[*]}" == "su -c"* ]]; then
    su \
      -c \
      "${_pacman_cmd[*]} \
        ${_pacman_args[*]}" || \
      true
  else
    "${_pacman_prefix[@]}" \
      "${_pacman_cmd[@]}" \
        "${_pacman_args[@]}" || \
      true
  fi
}

_android_system_install() {
  _android_corrupt || \
    true
  sudo \
    "${_install}" \
    -vDm644 \
    "./${_apk}" \
    "/${_apk}"
  _android_naughty || \
    true
}

_android_user_install() {
  sudo \
    mv \
    "./${_apk}" \
    "/data/local/tmp/base.apk"
  sudo \
    cmd \
      package \
        install \
        --user \
          0 \
        "/data/local/tmp/base.apk"
}

_inteppacman() {
  local \
    _user_install="${1}" \
    _pacman_prefix=() \
    _pacman_args=() \
    _pacman_cmd=() \
    _install \
    _arg \
    _os \
    _pkg \
    _apk \
    _android_app=() \
    _tmp_dir \
    _oldpwd
  shift \
    1
  _pacman_args=(
    "$@"
  )
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _install="/system/bin/install"
    _oldpwd="$( \
      pwd)"
    _tmp_dir="$( \
      mktemp \
        -d)"
    for _arg \
      in "${_pacman_args[@]}"; do
      if [[ "${_arg}" == *".pkg.tar."* ]]; then
        _pkg="$( \
          realpath \
            "${_arg}")"
        break
      fi
    done
    cd \
      "${_tmp_dir}"
    _msg_info \
      "installing ${_pkg}..."
    _android_app+=( $( \
      echo \
        "$(tar \
             -tf \
             "${_pkg}")" | \
             grep \
               "system/" | \
               grep \
                 "/base.apk")
    )
    _msg_info \
      "found ${_android_app[*]}"
    if [[ "${_android_app[*]}" != "" ]]; then
      tar \
        -xf \
        "${_pkg}"
    fi
    for _apk \
      in "${_android_app[@]}"; do
      _msg_info \
        "'${_apk}' -> '/${_apk}'..."
      if [[ "${_user_install}" == "n" ]]; then
        _android_system_install
      elif [[ "${_user_install}" == "y" ]]; then
        _android_user_install
      fi
      cd \
        "${_oldpwd}"
      rm \
        -rf "${_tmp_dir}"
    done
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    if [[ "$(_sudo_check)" == "true" ]]; then
      _pacman_prefix+=(
        'sudo'
      )
    elif [[ "$(_sudo_check)" == "false" ]]; then
      _pacman_prefix+=(
        'su'
          '-c'
      )
    fi
  fi
  _pacman_cmd+=(
    'pacman'
  )
  _pacman_run
  if [[ "${_os}" == "Android" ]]; then
  fi
}

_set_overrides() {
  _set \
    "operation" \
    "date" \
    "$(_get_date_human)"
  _set \
    "user" \
    "install" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "operation" "date")"
  _msg_info "       User-level install:   $(_get "user" "install")"
  _msg_info "              Pacman args:   ${pacman_args[*]}"
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

integer prude pacman

Usage:
  $(_get "app" "name")
    [options]
    --
    [pacman args]
  options:
     -u                   User-level installation.

     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'ucvh?' \
    arg; do
  case \
    "${arg}" in
    u) override_user_install="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
pacman_args=(
  "$@"
)
app_opts=(
  "$(_get \
       "user" \
       "install")"
  "${pacman_args[@]}"
)
_set_overrides
_config_user_init \
  "$(_get "app" "name")"
_show_config
_inteppacman \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
